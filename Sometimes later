
https://www3.ntu.edu.sg/home/ehchua/programming/webprogramming/jsdemo/JSFormValidation.html
https://github.com/fingers10
https://www.mssqltips.com/sqlservertip/5025/stored-procedure-to-generate-html-tables-for-sql-server-query-output/
https://stackoverflow.com/questions/27666550/get-multiple-data-from-tables-using-entity-framework-data-model
https://stackoverflow.com/questions/43627426/fetch-data-from-multiple-related-tables-using-entity-framework-core-and-display
https://stackoverflow.com/questions/60731190/how-to-fetch-record-of-more-than-one-table-in-asp-net-core-api-controller
https://www.mssqltips.com/sqlservertip/4054/creating-a-date-dimension-or-calendar-table-in-sql-server/
https://www.youtube.com/channel/UCB2ljFlOqQw02ZAQYD1QabA
https://www.youtube.com/@lifealiving
https://stackoverflow.com/questions/32540639/concat-first-and-last-name-mvc5
https://stackoverflow.com/questions/60093637/how-to-return-data-from-different-tables-using-sql-query-in-ef-core-without-usin
https://www.c-sharpcorner.com/article/curd-operation-using-repository-design-pattern-in-asp-net-mvc/
https://www.codelerner.com/core/crud-operation-using-asp-net-core-mvc-with-repository-pattern/
Generic Repository Crud Operation
https://medium.com/net-core/repository-pattern-implementation-in-asp-net-core-21e01c6664d7
https://www.pragimtech.com/blog/blazor/rest-api-repository-pattern/
https://codewithmukesh.com/blog/repository-pattern-in-aspnet-core/
https://www.c-sharpcorner.com/article/net-entity-framework-core-generic-async-operations-with-unit-of-work-generic-re/
https://jayanttripathy.com/how-to-implement-repository-pattern-in-asp-net-core-web-api/
https://code-maze.com/net-core-web-development-part4/
https://code-maze.com/global-error-handling-aspnetcore/
https://code-maze.com/onion-architecture-in-aspnetcore/
https://www.edureka.co/blog/interview-questions/sql-query-interview-questions
https://www.dotnetcurry.com/ShowArticle.aspx?ID=279
http://mukeshkumar.net/articles/mvc/crud-operation-with-database-first-approach-in-asp-net-mvc
https://shashangka.com/2015/12/27/asp-net-mvc-5-crud-operation-using-repository-pattern-with-stored-procuders/
https://www.c-sharpcorner.com/article/server-side-pagination-in-datatable-js/
https://ankitsharmablogs.com/authentication-using-facebook-in-asp-net-core-2-0/
https://ankitsharmablogs.com/asp-net-core-expense-manager-using-ef-core-and-highcharts/
https://mailtrap.io/blog/asp-net-core-send-email/
https://github.com/iammukeshm/OnionArchitecture (Checking Instant)
https://www.codewithmukesh.com/blog/onion-architecture-in-aspnet-core/
https://www.wearedotnet.io/
https://www.youtube.com/watch?v=B9zHW2vG7qI
https://datatables.net/forums/discussion/27216/how-to-get-the-parameters-on-mvc-controller-send-by-ajax-serverside-datatable-1-10
https://datatables.net/forums/discussion/75515/data-table-with-server-side-processing-returns-same-set-of-data-rows-on-pagination
https://datatables.net/forums/discussion/63279/how-to-form-a-proper-response-message-in-server-side-processing-in-net-core-mvc //Datatable Using Stored Procedure


public async Task<MasterResponseVM<List<GetAllAttendanceVM>>> GetAllAttendanceForUser(string userId, DateTime startDate, DateTime endDate)
{
    var today = DateTime.Now.Date;
    var result = new List<GetAllAttendanceVM>();

    try
    {
        // Fetch logs for the specific user within the date range
        var checkinCheckoutLogs = await _unitOfWork.GetAsyncRepository<CheckinCheckoutLogs>()
            .ListAllAsync();
        checkinCheckoutLogs = checkinCheckoutLogs
            .Where(log => log.UserId == userId &&
                          log.CheckinTime.HasValue &&
                          log.CheckinTime.Value.Date >= startDate.Date &&
                          log.CheckinTime.Value.Date <= endDate.Date)
            .ToList();

        // Fetch employee details for the specific user
        var employeeDetails = await _unitOfWork.GetAsyncRepository<EmployeeDetail>()
            .ListAllAsync();
        employeeDetails = employeeDetails.Where(emp => emp.UserId == userId).ToList();

        foreach (var employee in employeeDetails)
        {
            var attendanceByDay = new Dictionary<string, Dictionary<int, string>>();

            for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
            {
                var year = date.Year;
                var monthName = date.ToString("MMMM");
                var day = date.Day;

                // Determine attendance status
                string attendanceStatus;
                if (date > today)
                {
                    attendanceStatus = null; // Future dates
                }
                else
                {
                    var log = checkinCheckoutLogs.FirstOrDefault(l => l.CheckinTime.Value.Date == date);
                    attendanceStatus = log != null && log.CheckoutTime.HasValue ? "Present" : "Absent";
                }

                // Initialize month dictionary if not present
                if (!attendanceByDay.ContainsKey(monthName))
                {
                    attendanceByDay[monthName] = new Dictionary<int, string>();
                }

                // Set the attendance status for the day
                attendanceByDay[monthName][day] = attendanceStatus;
            }

            result.Add(new GetAllAttendanceVM
            {
                UserId = employee.UserId,
                EmployeeId = employee.Id,
                FullName = $"{employee.FirstName} {employee.LastName}",
                ProfileImage = employee.Image,
                AttendanceByMonthDay = attendanceByDay 
            });
        }

        return new MasterResponseVM<List<GetAllAttendanceVM>>(200, "Success", result);
    }
    catch (Exception ex)
    {
        ApplicationLogger.CreateLog(ex.Message, 2);
        return new MasterResponseVM<List<GetAllAttendanceVM>>(500, "Error", null);
    }
}

